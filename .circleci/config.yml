defaults: &defaults
  machine: true
  working_directory: ~/.go_workspace/src/github.com/habitat-sh/habitat-operator
  steps:
    - checkout
    - run:
        name: Check for changes in documentation and examples
        command: ./hack/check-skippable-changes.sh
    - run:
        name: Check if CRDs in various location are in sync
        command: ./hack/crd-check.sh
    - run:
        name: Setup environment variables
        command: |
          echo 'export IMAGE_NAME=eu.gcr.io/$GCLOUD_PROJECT_ID/habitat/habitat-operator-$CIRCLE_PROJECT_USERNAME-$CIRCLE_BUILD_NUM' >>"${BASH_ENV}"
          echo 'export IMAGE_TAG=testing' >>"${BASH_ENV}"
          echo 'export IMAGE_FULL_NAME="${IMAGE_NAME}:${IMAGE_TAG}"' >>"${BASH_ENV}"
          echo 'export CLUSTER_NAME="operator-test-$CIRCLE_PROJECT_USERNAME-$CIRCLE_BUILD_NUM"' >>"${BASH_ENV}"
    - run:
        name: setup kubectl
        command: |
          curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/${K8S_VERSION}/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
    - run:
        name: code-gen script
        environment:
          GOPATH: /home/circleci/.go_workspace
        command: |
          hack/verify-codegen.sh
    - run:
        name: unit tests
        command: make test
    - run:
        name: install google cloud sdk
        command: |
          sudo apt-get install lsb-release
          CLOUD_SDK_REPO="cloud-sdk-$(lsb_release -c -s)"
          echo "deb http://packages.cloud.google.com/apt $CLOUD_SDK_REPO main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
          curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
          sudo apt-get update && sudo apt-get install google-cloud-sdk

          # the GCLOUD_SERVICE_KEY environment variable is set in the web UI
          echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json

          # setup SDK
          gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
          # GCLOUD_PROJECT_ID is set in Circle CI web UI
          gcloud config set project $GCLOUD_PROJECT_ID
          gcloud config set compute/zone europe-west1-b
    - run:
        name: Update gcloud components
        command: sudo /opt/google-cloud-sdk/bin/gcloud components update --quiet
    - run:
        name: boot cluster on gke
        command: |
          gcloud container clusters create --enable-kubernetes-alpha --image-type=ubuntu --cluster-version=$GKE_CLUSTER_VERSION --disk-size=20 $CLUSTER_NAME
          echo 'export CLUSTER_CREATED=yes' >>"${BASH_ENV}"
    - run:
        name: create image
        command: make IMAGE=$IMAGE_NAME TAG=$IMAGE_TAG image
    - run:
        name: Configure docker to use gcloud to authenticate requests to Container Registry
        command: gcloud auth configure-docker
    - run:
        name: Push the docker image
        command: |
          docker push $IMAGE_FULL_NAME
          echo 'export IMAGE_PUSHED=yes' >>"${BASH_ENV}"
    - run:
        name: waiting for kubernetes to be ready
        command: |
          JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'
          until kubectl get nodes -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do
            sleep 1
          done
    - run:
        name: Grant the user the ability to create authorization roles
        command: kubectl create clusterrolebinding cluster-admin-binding --clusterrole cluster-admin --user $(gcloud config get-value account)
    - run:
        name: e2e tests
        command: make TESTIMAGE=$IMAGE_FULL_NAME e2e
    - run:
        name: print habitat object logs
        command: |
          if [[ -n "${CLUSTER_CREATED}" ]]; then
            kubectl logs -lhabitat-operator=true --tail=100
          else
            echo 'Cluster not set up, skipping getting logs'
          fi
        when: on_fail
    - run:
        name: Delete image from Container Registry
        command: |
          if [[ -n "${IMAGE_PUSHED}" ]]; then
            gcloud container images delete $IMAGE_FULL_NAME --force-delete-tags --quiet
          else
            echo 'Image not pushed, skipping deleting images from container registry'
          fi
        when: always
    - run:
        name: delete cluster on gke
        command: |
          if [[ -n "${CLUSTER_CREATED}" ]]; then
            gcloud container clusters delete $CLUSTER_NAME --quiet
          else
            echo 'Cluster not set up, skipping deleting a cluster on gke'
          fi
        when: always

jobs:
  k8s-v1.11:
    environment:
      K8S_VERSION: v1.11.2
      GKE_CLUSTER_VERSION: "1.11.5-gke.5"
    <<: *defaults
  k8s-v1.10:
    environment:
      K8S_VERSION: v1.10.0
      GKE_CLUSTER_VERSION: "1.10.11-gke.1"
    <<: *defaults

workflows:
  version: 2
  all-k8s-tests:
    jobs:
      - k8s-v1.11
      - k8s-v1.10
